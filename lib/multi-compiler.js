// Generated by CoffeeScript 1.8.0
(function() {
  var async, commentTransform, compilerAliases, concatAll, createIterator, emptyConfig, fragmenter, fs, parseConfig, resolveCompilerAlias, util;

  fs = require('fs');

  util = require('util');

  emptyConfig = {
    fragments: {}
  };

  parseConfig = function() {
    var e, json;
    try {
      if (!fs.existsSync('.emberscriptrc')) {
        return emptyConfig;
      }
      json = fs.readFileSync('.emberscriptrc', 'utf8');
      return JSON.parse(json);
    } catch (_error) {
      e = _error;
      console.error(e);
      return emptyConfig;
    }
  };

  fragmenter = function(mcOptions, options) {
    var anyFragExpr, config, createFragment, defaultFragments, defaultModelFragments, fragmentStack, fragments, srcPath, topFragment, topFragments;
    anyFragExpr = /#\s\((ember|em|coffee|cs|ecma|js|live|ls)\)\s*/;
    createFragment = function(lang, code) {
      return {
        type: lang,
        code: code
      };
    };
    config = parseConfig();
    srcPath = options.input;
    config.defaultLang || (config.defaultLang = mcOptions.lang || 'coffee');
    fragmentStack = [config.defaultLang];
    fragments = [];
    topFragment = function(code) {
      if (!code) {
        return;
      }
      return fragments.push(createFragment(config.defaultLang, code));
    };
    topFragments = function(fragments) {
      if (typeof fragments === 'object' && fragments.length) {
        return topFragment(fragments.join('\n'));
      }
    };
    defaultFragments = config.fragments["default"] || ['`import Ember from "ember"`'];
    if (defaultFragments) {
      topFragments(defaultFragments);
    }
    defaultModelFragments = ['`import DS from "ember-data"`', 'Model = DS.Model', 'attr = DS.attr', 'hasMany = DS.hasMany', 'belongsTo = DS.belongsTo', "computed = Ember.computed"];
    if (srcPath.match(/app\/models\//)) {
      topFragments(config.fragments.model || defaultModelFragments);
    }
    return {
      fragments: fragments,
      fragmentize: function(code) {
        var curFragment, index, matchTxt, nextFragMatch;
        if (typeof code !== 'string') {
          console.log(util.inspect(code));
          throw Error("Code to fragmentize must be a String, was: " + (typeof code));
        }
        nextFragMatch = code.match(anyFragExpr);
        if (!nextFragMatch) {
          return this.fragments.push(createFragment(fragmentStack.shift(), code));
        }
        matchTxt = nextFragMatch[0];
        index = code.indexOf(matchTxt);
        curFragment = code.slice(0, index);
        this.fragments.push(createFragment(fragmentStack.shift(), curFragment));
        fragmentStack.push(nextFragMatch[1]);
        return this.fragmentize(code.slice(index + matchTxt.length));
      }
    };
  };

  compilerAliases = {
    cs: 'coffee',
    em: 'ember',
    ecma: 'js',
    ls: 'live'
  };

  resolveCompilerAlias = function(alias) {
    return compilerAliases[alias] || alias;
  };

  commentTransform = function(compiled, type) {
    var compileComment;
    compileComment = "\n// fragment: " + type + "\n";
    return compileComment.concat(compiled);
  };

  createIterator = function(compilers, mcOptions, options) {
    var transform;
    transform = mcOptions.transformer || commentTransform;
    return function(fragment, cb) {
      var code, compiled, type;
      type = resolveCompilerAlias(fragment.type);
      code = fragment.code;
      if (!!code) {
        compiled = transform(compilers[type](code, options), type);
        return cb(null, compiled);
      } else {
        return cb(null, code);
      }
    };
  };

  async = require('async');

  concatAll = function(code, compilers, cb, mcOptions, options) {
    var fragger;
    mcOptions = mcOptions || {};
    fragger = fragmenter(mcOptions, options);
    fragger.fragmentize(code);
    return async.concat(fragger.fragments, createIterator(compilers, mcOptions, options), function(err, results) {
      if (err) {
        return next(err);
      }
      return cb(results.join('\n'));
    });
  };

  module.exports = concatAll;

}).call(this);

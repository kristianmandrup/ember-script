// Generated by CoffeeScript 2.0.0-beta9-dev
var compilers, createCodeEmitter, EmberScript, extend, multiCompile;
EmberScript = require('./module');
extend = exports.extend = function (object, properties) {
  var key, val;
  for (key in properties) {
    val = properties[key];
    object[key] = val;
  }
  return object;
};
EmberScript.compileCode = function (input, options) {
  var csAst, jsAst;
  csAst = EmberScript.parse(input, { raw: true });
  jsAst = EmberScript.compile(csAst, options);
  return EmberScript.js(jsAst, options);
};
compilers = {
  js: function (source) {
    return source;
  },
  coffee: function (source, options) {
    var CoffeeScript;
    if (null == options)
      options = {};
    CoffeeScript = require('coffee-script');
    return CoffeeScript.compile(source, { bare: true });
  },
  live: function (source, options) {
    var LiveScript;
    if (null == options)
      options = {};
    LiveScript = require('LiveScript');
    return LiveScript.compile(source, { bare: true });
  },
  ember: function (source, options) {
    var opts;
    if (null == options)
      options = {};
    opts = {
      raw: true,
      literate: true
    };
    return EmberScript.compileCode(source, opts);
  }
};
createCodeEmitter = function (options) {
  return function (code) {
    code = '' + code + '\n';
    if (options.output) {
      return fs.writeFile(options.output, code, function (err) {
        if (null != err)
          throw err;
      });
    } else {
      return process.stdout.write(code);
    }
  };
};
multiCompile = require('./multi-compiler');
module.exports = function (code, options) {
  var codeEmitter, mcOptions;
  mcOptions = { lang: 'coffee' };
  codeEmitter = options.codeEmitter || createCodeEmitter(options);
  return multiCompile(code, compilers, codeEmitter, mcOptions, options);
};

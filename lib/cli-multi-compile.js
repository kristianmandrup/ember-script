// Generated by CoffeeScript 1.8.0
(function() {
  var EmberScript, basePrecompiler, compilers, createCodeEmitter, extend, modelPrecompiler, multiCompile, precompilerFor, routerPrecompiler, util;

  EmberScript = require('./module');

  util = require('util');

  extend = exports.extend = function(object, properties) {
    var key, val;
    for (key in properties) {
      val = properties[key];
      object[key] = val;
    }
    return object;
  };

  EmberScript.compileCode = function(input, options) {
    var csAst, jsAst;
    csAst = EmberScript.parse(input, {
      raw: true,
      bare: true
    });
    jsAst = EmberScript.compile(csAst, {
      bare: true
    });
    return EmberScript.js(jsAst);
  };

  compilers = {
    js: function(source) {
      return source;
    },
    coffee: function(source, options) {
      var CoffeeScript;
      if (options == null) {
        options = {};
      }
      CoffeeScript = require('coffee-script');
      return CoffeeScript.compile(source, {
        bare: true
      });
    },
    live: function(source, options) {
      var LiveScript;
      if (options == null) {
        options = {};
      }
      LiveScript = require('LiveScript');
      return LiveScript.compile(source, {
        bare: true
      });
    },
    ember: function(source, options) {
      var opts;
      if (options == null) {
        options = {};
      }
      opts = {
        raw: true,
        literate: true
      };
      return EmberScript.compileCode(source, opts);
    }
  };

  createCodeEmitter = function(options) {
    return function(code) {
      code = "" + code + "\n";
      if (options.output) {
        return fs.writeFile(options.output, code, function(err) {
          if (err != null) {
            throw err;
          }
        });
      } else {
        return process.stdout.write(code);
      }
    };
  };

  multiCompile = require('./multi-compiler');

  precompilerFor = function(options) {
    var srcPath;
    srcPath = options.input;
    if (srcPath.match(/app\/router\./)) {
      return routerPrecompiler;
    }
    if (srcPath.match(/app\/models\//)) {
      return modelPrecompiler;
    }
    return basePrecompiler;
  };

  basePrecompiler = function(code) {
    code = code.replace(/\$go/gi, "@transitionToRoute");
    code = code.replace(/(\w+)\+\+/gi, "incrementProperty '$1'");
    code = code.replace(/(\w+)\-\-/gi, "decrementProperty '$1'");
    return code;
  };

  modelPrecompiler = function(code) {
    var type, _i, _len, _ref;
    code = basePrecompiler(code);
    _ref = ['string', 'number', 'boolean', 'date'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      type = _ref[_i];
      code = code.replace(RegExp("\\$" + type, "gi"), "attr '" + type + "'");
    }
    code = code.replace(/=\s*model$/mgi, "= Model.extend");
    return code;
  };

  routerPrecompiler = function(code) {
    code = basePrecompiler(code);
    code = code.replace(/^(\s*)\$(\w+)/mgi, "$1@resource '$2',");
    code = code.replace(/^(\s*)_(\w+)$/mgi, "$1@route '$2'");
    code = code.replace(/^(\s*)_(\w+)\s*(\w+)/mgi, "$1@route '$2', $3");
    code = code.replace(/=\s*class\s*router\s/gi, "= Router.map ->");
    return code;
  };

  module.exports = function(code, options) {
    var codeEmitter, lines, mcOptions, precompile;
    mcOptions = {
      lang: 'coffee'
    };
    codeEmitter = options.codeEmitter || createCodeEmitter(options);
    lines = code.split('\n');
    if (!(lines[0] && lines[0].match(/# \(\w+\)/))) {
      code = "# (em)\n" + code;
    }
    precompile = precompilerFor(options);
    code = precompile(code);
    return multiCompile(code, compilers, codeEmitter, mcOptions, options);
  };

}).call(this);
